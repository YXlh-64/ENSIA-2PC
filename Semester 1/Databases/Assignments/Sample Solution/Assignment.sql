--Q1
SELECT COUNT(*) AS NumCustomersOver60
FROM CUSTOMER
WHERE MONTHS_BETWEEN(CURRENT_DATE, BIRTHDATE) / 12 > 60;

--Q2
SELECT *
FROM CUSTOMER
WHERE LASTNAME LIKE 'T%';

--Q3
SELECT COUNT(*) AS NumFemaleCustomersWithVehicle1992
FROM CUSTOMER c
JOIN VEHICLE v ON c.CUSTOMER_NUMBER = v.CUSTOMER_NUMBER
WHERE (c.CIV = 'Mme' OR c.CIV = 'Mle') AND v.YEAR = 1992;

--Q4
SELECT FIRSTNAME_EMP, CATEGORY
FROM EMPLOYEE
ORDER BY SALARY DESC
FETCH FIRST 5 ROWS ONLY;

--Q5
SELECT CATEGORY, AVG(SALARY) AS AverageSalary
FROM EMPLOYEE
WHERE CATEGORY IN ('Assistant', 'MÃ©canicien')
GROUP BY CATEGORY;

--Q6
SELECT SUM(SALARY) AS TotalBudget
FROM EMPLOYEE;

--Q7
SELECT v.*
FROM VEHICLE v
JOIN CUSTOMER c ON v.CUSTOMER_NUMBER = c.CUSTOMER_NUMBER
WHERE c.TELPRIV IS NOT NULL;

--Q8
SELECT B.MODEL_NAME, BRAND.BRAND_NAME FROM 
(SELECT MODEL.MODEL_NAME, MODEL.BRAND_NUMBER 
FROM ( 
    SELECT MODEL_NUMBER 
    FROM VEHICLE 
    JOIN INTERVENTIONS ON VEHICLE.VEHICLE_NUMBER = INTERVENTIONS.VEHICLE_NUMBER 
    ORDER BY (INTERV_END_DATE - INTERV_START_DATE) DESC 
    FETCH FIRST 1 ROWS ONLY 
) MN JOIN MODEL ON MN.MODEL_NUMBER= MODEL.MODEL_NUMBER) 
B JOIN BRAND ON B.BRAND_NUMBER = BRAND.BRAND_NUMBER;
--Q9
SELECT FIRSTNAME_EMP, LASTNAME_EMP FROM( 
    (SELECT EMPLOYEE_NUMBER FROM  
        PARTICIPANTS GROUP BY (EMPLOYEE_NUMBER) ORDER BY  
        COUNT(*) DESC FETCH FIRST 1 ROWS ONLY) EN JOIN EMPLOYEE 
        ON EN.EMPLOYEE_NUMBER = EMPLOYEE.EMPLOYEE_NUMBER 
);
--Q10
SELECT BRAND.BRAND_NAME FROM 
( 
    SELECT MODEL.BRAND_NUMBER FROM 
    ( 
        SELECT VEHICLE.MODEL_NUMBER FROM VEHICLE JOIN   
        ( 
            SELECT VEHICLE_NUMBER FROM INTERVENTIONS GROUP BY (VEHICLE_NUMBER) ORDER BY COUNT(*) DESC FETCH FIRST 3 ROWS ONLY 
        )VN ON VN.VEHICLE_NUMBER = VEHICLE.VEHICLE_NUMBER 
    ) MN JOIN MODEL ON 
    MN.MODEL_NUMBER = MODEL.MODEL_NUMBER 
)BN JOIN BRAND ON BN.BRAND_NUMBER = BRAND.BRAND_NUMBER;

--Q11
-- Add the attribute TOTAL_INTERVENTIONS in the employee table
ALTER TABLE EMPLOYEE
ADD TOTAL_INTERVENTIONS NUMBER;


CREATE OR REPLACE TRIGGER TOTAL_INTERVENTIONS_TRIGGER
AFTER INSERT OR DELETE OR UPDATE ON PARTICIPANTS
FOR EACH ROW
DECLARE
    nb_interventions NUMBER;
BEGIN
    -- In case of update 
    IF UPDATING THEN
        IF :OLD.EMPLOYEE_NUMBER IS NOT NULL AND :NEW.EMPLOYEE_NUMBER IS NOT NULL THEN
            SELECT COUNT(*) INTO nb_interventions FROM PARTICIPANTS WHERE EMPLOYEE_NUMBER = :OLD.EMPLOYEE_NUMBER;
            UPDATE EMPLOYEE SET TOTAL_INTERVENTIONS = nb_interventions WHERE EMPLOYEE_NUMBER = :OLD.EMPLOYEE_NUMBER;
        END IF;
    ELSIF INSERTING THEN
        -- In case of insert
        IF :NEW.EMPLOYEE_NUMBER IS NOT NULL THEN
            SELECT COUNT(*) INTO nb_interventions FROM PARTICIPANTS WHERE EMPLOYEE_NUMBER = :NEW.EMPLOYEE_NUMBER;
            UPDATE EMPLOYEE SET TOTAL_INTERVENTIONS = nb_interventions WHERE EMPLOYEE_NUMBER = :NEW.EMPLOYEE_NUMBER;
        END IF;
    ELSIF DELETING THEN
        -- In case of delete
        IF :OLD.EMPLOYEE_NUMBER IS NOT NULL THEN
            SELECT COUNT(*) INTO nb_interventions FROM PARTICIPANTS WHERE EMPLOYEE_NUMBER = :OLD.EMPLOYEE_NUMBER;
            UPDATE EMPLOYEE SET TOTAL_INTERVENTIONS = nb_interventions WHERE EMPLOYEE_NUMBER = :OLD.EMPLOYEE_NUMBER;
        END IF;
    END IF;
END;
/


--Q12.The administrator wants to save for each month of the year the total earnings of all the interventions. Each time an intervention is added in amonth, either it is the first intervention in that month, so a row is addedto the table Earning (MONTH, YEAR, TOTAL_earnings), or it is not thefirst intervention in that month, so the attribute TOTAL_earnings isupdated. Create a corresponding trigger.

CREATE TABLE EARNING (
    MONTH NUMBER,
    YEAR NUMBER,
    TOTAL_earnings DECIMAL,
    CONSTRAINT PK_EARNING PRIMARY KEY(TOTAL_earnings));

ALTER TABLE INTERVENTIONS ADD TOTAL_earnings DECIMAL;
ALTER TABLE INTERVENTIONS ADD CONSTRAINT FK_INTERVENTIONS_EARNINGS FOREIGN KEY (TOTAL_earnings) REFERENCES EARNING (TOTAL_earnings);

CREATE OR REPLACE TRIGGER UPDATE_TOTAL_EARNINGS_TRIGGER
AFTER INSERT ON INTERVENTIONS
FOR EACH ROW
DECLARE
    v_total_earnings NUMBER;
BEGIN
    -- Check if there is an existing row for the month and year in EARNING
    SELECT TOTAL_EARNINGS INTO v_total_earnings
    FROM EARNING
    WHERE MONTH = EXTRACT(MONTH FROM :NEW.INTERV_START_DATE)
    AND YEAR = EXTRACT(YEAR FROM :NEW.INTERV_START_DATE);

    -- If no row exists, insert a new row
    IF v_total_earnings IS NULL THEN
        INSERT INTO EARNING (MONTH, YEAR, TOTAL_EARNINGS)
        VALUES (EXTRACT(MONTH FROM :NEW.INTERV_START_DATE),
                EXTRACT(YEAR FROM :NEW.INTERV_START_DATE),
                :NEW.EARNINGS);
    ELSE
        -- If a row exists, update the existing row
        UPDATE EARNING
        SET TOTAL_EARNINGS = v_total_earnings + :NEW.EARNINGS
        WHERE MONTH = EXTRACT(MONTH FROM :NEW.INTERV_START_DATE)
        AND YEAR = EXTRACT(YEAR FROM :NEW.INTERV_START_DATE);
    END IF;
END;
/
