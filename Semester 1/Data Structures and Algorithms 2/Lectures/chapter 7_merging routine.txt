/**
* Internal method that merges two sorted halves of a subarray.
* a is an array of Comparable items.
* tmpArray is an array to place the merged result.
* leftPos is the leftmost index of the subarray.
* rightPos is the index of the start of the second half.
* rightEnd is the rightmost index of the subarray.
*/

template <typename Comparable>
void merge( vector<Comparable> & a, vector<Comparable> & tmpArray,
            int leftPos, int rightPos, int rightEnd )
{
	int leftEnd = rightPos - 1;
	int tmpPos = leftPos;
	int numElements = rightEnd - leftPos + 1;

	// Main loop
	while( leftPos <= leftEnd && rightPos <= rightEnd )
		if( a[ leftPos ] <= a[ rightPos ] )
			tmpArray[ tmpPos++ ] = std::move( a[ leftPos++ ] );
	     	else
			tmpArray[ tmpPos++ ] = std::move( a[ rightPos++ ] );

	while( leftPos <= leftEnd )             // Copy rest of first half
	    	tmpArray[ tmpPos++ ] = std::move( a[ leftPos++ ] );

	while( rightPos <= rightEnd )           // Copy rest of right half
	    	tmpArray[ tmpPos++ ] = std::move( a[ rightPos++ ] );

	// Copy tmpArray back
	for( int i = 0; i < numElements; ++i, --rightEnd )
	    	a[ rightEnd ] = std::move( tmpArray[ rightEnd ] );
}