//
// Figure 6.12 Method to perform deleteMin in a binary heap
// 
/**
* Remove the minimum item.
* Throws UnderflowException if empty.
*/
void deleteMin( )
{
	if( isEmpty( ) )
		throw UnderflowException{ };

	array[ 1 ] = std::move( array[ currentSize-- ] );
	percolateDown( 1 );
}

/**
* Remove the minimum item and place it in minItem.
* Throws UnderflowException if empty.
*/
void deleteMin( Comparable & minItem )
{
	if( isEmpty( ) )
		throw UnderflowException{ };

	minItem = std::move( array[ 1 ] );
	array[ 1 ] = std::move( array[ currentSize-- ] );
	percolateDown( 1 );
}

/**
* Internal method to percolate down in the heap.
* hole is the index at which the percolate begins.
*/
void percolateDown( int hole )
{
	int child;
	Comparable tmp = std::move( array[ hole ] );

	for( ; hole * 2 <= currentSize; hole = child )
	{
		child = hole * 2;		// Left child
		if( child != currentSize && array[ child + 1 ] < array[ child ] ) //********
			++child;                // consider the right child
		if( array[ child ] < tmp )
			array[ hole ] = std::move( array[ child ] );
		else
			break;
	}
	array[ hole ] = std::move( tmp );
}
