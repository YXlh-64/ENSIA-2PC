/**
* Figure 9.29 Vertex class for Dijkstraâ€™s algorithm (pseudocode)
* PSEUDOCODE sketch of the Vertex structure.
* In real C++, path would be of type Vertex *,
* and many of the code fragments that we describe
* require either a dereferencing * or use the
* -> operator instead of the . operator.
* Needless to say, this obscures the basic algorithmic ideas.
*/

struct Vertex
{
	List adj; 		// Adjacency list
	bool known;
	DistType dist; 		// DistType is probably int
	Vertex path; 		// Probably Vertex *, as mentioned above
	// Other data and member functions as needed
};

/**
* Figure 9.30 Routine to print the actual shortest path
* Print shortest path to v after dijkstra has run.
* Assume that the path exists.
*/

void Graph::printPath( Vertex v )
{
	if( v.path != NOT_A_VERTEX )
	{
		printPath( v.path );
		cout << " to ";
	}
	cout << v;
}
